package TreeNode;

import com.sun.javafx.image.IntPixelGetter;

import java.util.*;

public class mkrTreeNode {

    public TreeNode makeTreeNode (int data, TreeNode left, TreeNode right) {

        TreeNode node = new TreeNode(data);
        node.setLeftNode(left);
        node.setRightNode(right);

        return node;

    }

    /**
     * 전위순회
     * @param node
     * @return
     */
    public List<Integer> preOrder(TreeNode node) {
        List<Integer> list = new ArrayList<>();

        if(node != null) {
            list.add(node.val);
            if (node.left != null) {
                list.addAll(preOrder(node.left));
            }

            if (node.right != null) {
                list.addAll(preOrder(node.right));
            }
        } else {
            return list;
        }
        return list;
    }

    /**
     * 중위순회
     * @param node
     * @return
     */
    public List<Integer> inOrder(TreeNode node) {
        List<Integer> list = new ArrayList<>();

        if(node != null) {

            if (node.left != null) {
                list.addAll(inOrder(node.left));
            }
            list.add(node.val);
            if (node.right != null) {
                list.addAll(inOrder(node.right));
            }
        } else {
            return list;
        }
        return list;

    }

    /**
     * 후위순회
     * @param node
     * @return
     */
    public List<Integer>  postOrder(TreeNode node) {
        List<Integer> list = new ArrayList<>();

        if(node != null) {

            if (node.left != null) {
                list.addAll(postOrder(node.left));
            }

            if (node.right != null) {
                list.addAll(postOrder(node.right));
            }
            list.add(node.val);
        } else {
            return list;
        }
        return list;
    }

    /**
     * Stack 을 사용할 경우 중위순회와 같은 결과를 얻을 수 있다.
     *           15
     *       5       25
     *   1       20      30
     *
     * 1) 15 -> 5 -> 1 Node 가 순서대로 들어간다.
     * 2) 제일 처음 Pop 하는 것은 1을 가진 Node 가 됨
     * 3) 그 값을 List 에 담는다.
     * 4) 해당 1 Node 의 오른쪽에 Node 에 값이 존재하는지 체크
     * 5) 있다면 push 없다면 Skip 됨
     * @param node
     * @return
     */
    public List<Integer> stackMethod (TreeNode node) {
        Stack<TreeNode> stack = new Stack<>();
        List<Integer> list = new ArrayList();
        while (node != null || !stack.isEmpty()) {

            while(node != null) {
                stack.push(node);
                node = node.getLeftNode();
            }

            node = stack.pop();
            list.add(node.val);
            node =  node.getRightNode();
        }
        return list;
    }

    /**
     * 레벨 순회로 레벨 별로 읽어서 출력함.
     *          15             -> Lv1
     *      5       25         -> Lv2
     *  1       20      30     -> Lv3
     *
     * 15, 5, 25, 1, 20, 30 -> 결과값
     * @param node
     * @return
     */
    public List<Integer> queueMethod(TreeNode node) {
        List<Integer> list = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();

        queue.offer(node);
        // offer () / add () 의 차이
        // offer () 는 만약 큐가 꽉 찼을 경우 false 를 리턴한다.
        // add () 는 만약 큐가 꽉 찼으면 Exception 을 리턴한다.

        while(!queue.isEmpty()) {

            TreeNode tmpNode = queue.poll();

            list.add(tmpNode.val);

            if(tmpNode.getLeftNode() != null)
                queue.offer(tmpNode.getLeftNode());
            if(tmpNode.getRightNode() != null)
                queue.offer(tmpNode.getRightNode());
        }
        return list;
    }

    /**
    *       1       - lv1
    *   2       2   - lv2
    *     3       3 - lv3
    *
    * 재귀함수를 이용해서 풀었는데 
    * root1 ---- root2 는 같기 때문에 서로 다른 방향으로 검색해서 비교
    * 1) root1 의 right 와 root2의 left 는 각 2 2 이기 때문에 true 반환
    * 2) 재귀로 다시 한번 들어가기 lv2 를 기준으로 각 left right 를 구함.
    * 3) root1의 right는 3 이지만 root2 의 left는 null 이기 때문에 다름.
    * 이렇게 진행이됨
    **/
    public boolean isCheckMirrorTree(TreeNode root1, TreeNode root2) {

        if( root1 == null || root2 == null) {
            return root1==root2;
        }

        if(root1.val != root2.val) {
            return false;
        }

        return isCheckMirrorTree(root1.right, root2.left) && isCheckMirrorTree(root1.left, root2.right);
    }
}

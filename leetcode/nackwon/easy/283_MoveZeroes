package JavaSolution;

/**
 * In-place 알고리즘을 이용하여 문제 해결
 */
public class MovesZeroes {

    public static void main(String[] args)  {

        MovesZeroes movesZeroes = new MovesZeroes();

        int[] nums = {0,1,0,3,12};
        movesZeroes.moveZeroes2(nums);
    }

    /**
     * 1) 제로가 존재하는 Index 를 구한다.
     * 2) 0의 인덱스 값 뒤에 오는 요소들 중 처음으로 나오는 0이 아닌 숫자를 0의 인덱스에 넣고 숫자가 있던 자리는 0으로 바꾼다.
     * 3) 배열의 값이 0인 인덱스들에 같은 행위를 반복한다.
     *
     * @param nums
     */
    public void moveZeroes1(int[] nums) {

        int intSize = nums.length;

        int zeroIndex = -1;

        for (int i=0;i<intSize; ++i) {
            if (nums[i] == 0) {
                zeroIndex = i;
                break;
            }
        }

        if(zeroIndex == -1) {
            return;
        }

        for (int i=0; i<intSize; ++i) {

            if(nums[i] != 0) {
                nums[zeroIndex] = nums[i];
                nums[i] = 0;
                zeroIndex++;
            }
        }

        System.out.println(nums);
    }

    /**
     * 1) 배열을 탐색하면서 0이 아닌 숫자들을 앞에서부터 순서대로 집어넣고 그 뒤를 0으로 채우는 것이다.
     *
     * @param nums
     */
    public void moveZeroes2(int[] nums) {

        int intSize = nums.length;

        int zeroIndex = 0;
        for (int i=0; i<intSize; ++i) {
            if(nums[i] != 0) {
                nums[zeroIndex] = nums[i];
                zeroIndex++;
            }
        }

        while (zeroIndex < intSize) {
            nums[zeroIndex] = 0;
            zeroIndex++;
        }

        System.out.println(nums);
    }
}

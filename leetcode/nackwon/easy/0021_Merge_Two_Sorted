/**
 * Runtime : 61.88%
 * Memory  : 25.09%
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {

        ListNode answer = new ListNode();
        ListNode newNode = answer;
        
        if (list1 == null)
           return newNode.next = list2;
        
        if (list2 == null)
            return newNode.next = list1;
        
        
        while (list1 != null && list2 != null)
        {
            if (list1.val <= list2.val)
            {
                newNode.next = list1;
                list1 = list1.next;
            }
            else 
            {
                newNode.next = list2;
                list2 = list2.next;
            }
            newNode = newNode.next;
        }
    
        if (list1 != null)
            newNode.next = list1;
     
        if (list2 != null)
            newNode.next = list2;
        
        return answer.next;

    }
}

// 생각보다 오랜 시간이 필요했음.
// Linked List에 관한 기본 지식이 부족함  *추후 공부가 필요함
//
// 1) list1 (1,2,4) , list2 (1,3,4) 가 비었을 경우 Skip
// 2) 각 list의 첫 번째 값 비교
// 3) list1이 작거나 같으면 newNode의 next가 list1을 가르침 -> newNode 값이 결국 1->2->4 순서대로 이어짐
// 3-1) list1은 원래 1->2->4 였으나 1은 새로운 Node에 추가되므로 list1 next 값을 list1에 넣으면 2->4 로 값이 변함
// 4) newNode 의 다음 next 를 지정함 이렇게 반복
// 
// 

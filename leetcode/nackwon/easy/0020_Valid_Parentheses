/**
* RunTime : 32.32%
* Memory  : 6.22%
**/
class Solution {
    public boolean isValid(String s) {
        int intSize = s.length();

        char[] charArray = s.toCharArray();
        Stack stack = new Stack();
        int intTmp = 0;
        for (int i=0;i<intSize; ++i) {

            String strValue = String.valueOf(charArray[i]);

            if (stack.empty()) {
                stack.push(strValue);
            } else {
                String strPeekValue = (String) stack.peek();

                if (intNumber(strPeekValue) + intNumber(strValue) == 0) {
                    if(intNumber(strPeekValue) > 0) {
                        stack.pop();
                    }
                } else {
                    stack.push(strValue);
                }
            }
        }

        if (stack.isEmpty()) {
            return true;
        } else {
            return false;
        }
    }
    
    public int intNumber (String str) {

        int intResult = 0;

        if ("(".contains(str)) {
            intResult = 1;
        } else if ("{".equals(str)) {
            intResult = 2;
        } else if ("[".equals(str)) {
            intResult = 3;
        } else if (")".equals(str)) {
            intResult = -1;
        } else if ("}".equals(str)) {
            intResult = -2;
        } else if ("]".equals(str)) {
            intResult = -3;
        }

        return intResult;
    }
}
// Stack을 사용해서 문제 해결
// 차례대로 push 하면서 이전 문자를 치환한 값끼리 더해 0 이 되면 대칭이므로
// Stack에서 Pop으로 제거
// Pop 하기 전에 현재 들어가 있는 문자의 치환한 값이 0 보다 작으면 닫는 괄호이기 때문에 
// Pop을 수행하지 않음. 

-> 다른 소스코드 확인 결과 전부 스택을 
-> 아스키코드 값으로 해결하려고 했으나 확인해보니 공통적인 부분이 없어서 패스함.

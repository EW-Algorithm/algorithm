package Solution;

/**
 * 문제) Array 속성 중 연속된 숫자 합이 가장 큰 것을 구하는 문제
 *  - 동적 계획법 (DP) 을 이용해 문제를 해결하면된다.
 *      -> 연산이 반복되는 결점을 보완하기 위해 만들어진 개념.
 *      -> 진행된 내용을 저장해두고 수행 중 다시 진행되는 내용일 경우 저장된 내용을 불러온다.
 *      -> 모든 방법을 일일이 검토하여 최적의 해를 찾는 알고리즘으로 이와 대비되는 알고리즘은 그리디 알고리즘이 있다.
 *
 *  -> 그리디 알고리즘 : 그 순간에 최적의 해를 구하는 알고리즘
 */
public class MaximumSubarray {

    public static void main(String[] args) {

        int[] nums1 = {-2,1,-3,4,-1,2,1,-5,4};

        System.out.println(maxSubarray(nums1));
    }

    /**
     * LeetCode : 53. Maximum Subarray
     * @param nums
     * @return
     */
    public static int maxSubarray(int[] nums) {

        int intCurrentSubArray = nums[0];
        int intMaxCurrentSubArray = nums[0];

        int intSize = nums.length;
        for(int i=1; i<intSize; ++i ){
            intCurrentSubArray = Math.max(nums[i], intCurrentSubArray + nums[i]);
            intMaxCurrentSubArray = Math.max(intMaxCurrentSubArray, intCurrentSubArray);
        }
        return intMaxCurrentSubArray;
    }

    /**
     * 해당 메소드는 피보나치 수열로 동적 계획법의 등장 배경이된다.
     * 해당 메소드를 진행하게 되면 계속해서 이미 연산한 내용을 여러번 연산하게된다.
     * 이럴 경우 당연히 효율은 떨어질 것임 이것을 해결하기 위해 나온 방법이 동적계획법(DP)
     *
     * 아래 피보나치 수열을 DP로 변경한 내용
     * @param n
     * @return
     */
    public int fibonacci(int n) {
        if(n <= 2) {
            return 1;
        } else {
            return fibonacci(n-1) + fibonacci(n-2);
        }
    }

    /**
     * 피보나치 수열을 동적 계획법으로 표현한 메소드
     * DP는 이미 연산한 내용을 중복으로 연산하는 것을 하지 않기 위해 연산된 내용을 저장해두고
     * 똑같은 연산이 진행되려고 할 때 저장된 값을 가져오게끔 한다.
     * -> 메모제이션이라고도 불린다.
     * @param n
     * @return
     */
    public int fibonacciDP(int n) {

        int[] fiboArray = new int[100];
        if (n <= 2) {
            return 1;
        }

        /********************************************************
         * TOP-BOTTOM 방식
         * fibo(6) 을 호출하게 되면 6부터 작은 수로 가면서 값을 불러온다.
         *******************************************************/
        if(fiboArray[n] == 0) {
            fiboArray[n] = fibonacciDP(n-1) + fibonacciDP(n-2); // <-- 해당 계산 값을 배열에 저장해 다시 연산을 하지 않도록 함.
        }

        /************************************************************
         * BOTTOM-TOP 방식
         * fibo(6) 을 호출하게 되면 fibo(0)부터 점점 i 가 커지면서 진행된다.
         ************************************************************/
        for(int i=2; i<=n; ++i) {
            fiboArray[n] = fibonacci(i-1) + fibonacci(i-2);
        }
        return fiboArray[n];
    }
}

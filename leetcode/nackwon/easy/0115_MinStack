package JavaSolution;

import java.util.ArrayList;

/**
 * - Min Stack 을 구현하는 문제
 *
 * 차례대로 넣고 최소 값을 찾는 것
 *  1) push 후 최소값을 찾는다.
 *  2) push 한 값 중에 최소값을 빠질 경우 그 것으 제외한 최소값을 찾는다.
 *      -> 즉, 차례로 다음 최소값을 알 고 있어야 한다.
 *
 *
 *
 * - Array List 로 한번 풀어봄
 *  - 효율이 그렇게 좋지는 않은 것 같음.
 *  - 다른 사람도 비슷하게 풀었으나 효율이 비슷함
 *  - 다르게 Stack 을 이용해서 풀었음.
 *
 *
 */
public class MinStack {

    ArrayList<Integer> stack = null;
    int min = 0;

    public static void main(String[] args) {
        MinStack minStack = new MinStack();
        minStack.push(2);
        minStack.push(0);
        minStack.push(3);
        minStack.push(0);
        System.out.println(minStack.getMin());
        minStack.pop();
        System.out.println(minStack.getMin());
        minStack.pop();
        System.out.println(minStack.getMin());
        minStack.pop();
        System.out.println(minStack.getMin());
    }

    public MinStack() {
        stack = new ArrayList<>();
    }
    public void push(int val) {

        stack.add(val);
    }
    public void pop() {
        stack.remove(stack.size()-1);
    }
    public int top() {
        return stack.get(stack.size()-1);
    }
    public int getMin() {
        min = Integer.MAX_VALUE;
        for(int index : stack) {

            if (min >= index) {
                min = index;
            }
        }
        return min;
    }
}
--> Array List 로 문제 해결한 
